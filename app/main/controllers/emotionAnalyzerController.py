from flask import request
from ..serializers.emotionAnalyzerDto import EmotionAnalyzerDto
from ..services.emotionAnalyzer.emotionAnalyzer import EmotionAnalyzer
from flask_login import login_required
from flask_restx import Resource

api = EmotionAnalyzerDto.api
paginatedEmotionAnalyzer = EmotionAnalyzerDto.paginatedEmotionAnalyzer
emotionAnalyzer = EmotionAnalyzerDto.emotionAnalyzer
tweetAndEmotion = EmotionAnalyzerDto.tweetAndEmotion


@api.route("")
class EmotionAnalyzerController(Resource):
    @login_required
    @api.marshal_with(paginatedEmotionAnalyzer)
    @api.doc(params={'topicTitle': 'Topic Title', 'reportId': 'Report id', 'algorithm': 'Algorithm', 'threshold': 'Threshold', 'page': 'Page number', 'per_page': 'Tweets per page'})
    def get(self):
        """
        Returns a page of tweet with emotions
        """
        topicTitle = request.args.get('topicTitle', "", type=str)
        reportId = request.args.get('reportId', 0, type=int)
        algorithm = request.args.get('algorithm', "", type=str)
        threshold = request.args.get('threshold', 0, type=float)
        page = request.args.get('page', 1, type=int)
        per_page = request.args.get('per_page', 10, type=int)
        sa = EmotionAnalyzer()
        return sa.getEmotions(page=page, per_page=per_page, topicTitle=topicTitle, reportId=reportId, algorithm=algorithm, threshold=threshold)

    @login_required
    @api.expect(emotionAnalyzer)
    def post(self):
        """
        Analyses the emotion of tweets generated by a similarity algorithm.
        """
        topicTitle = request.json['topicTitle']
        sa = EmotionAnalyzer()
        sa.analyzeEmotions(topicTitle=topicTitle)


@api.route("/download")
class EmotionsDownloadController(Resource):
    @login_required
    @api.marshal_with(tweetAndEmotion)
    @api.doc(params={'topicTitle': 'Topic Title'})
    def get(self):
        """
        Returns all the tweets and emotions belonging to a topic
        """
        topicTitle = request.args.get('topicTitle', "", type=str)
        sa = EmotionAnalyzer()
        return sa.getEmotionsToDownload(topicTitle=topicTitle)


@api.route("/topic")
class TopicEmotionAnalyzerController(Resource):
    @login_required
    @api.doc(params={'topicTitle': 'Topic Title', 'reportId': 'Report id', 'algorithm': 'Algorithm', 'threshold': 'Threshold'})
    def get(self):
        """
        Returns all the tweets and emotions belonging to a topic as a whole
        """
        topicTitle = request.args.get('topicTitle', "", type=str)
        reportId = request.args.get('reportId', 0, type=int)
        algorithm = request.args.get('algorithm', "", type=str)
        threshold = request.args.get('threshold', 0, type=float)
        sa = EmotionAnalyzer()
        return sa.getEmotionsOfATopic(topicTitle=topicTitle, reportId=reportId, algorithm=algorithm, threshold=threshold)
