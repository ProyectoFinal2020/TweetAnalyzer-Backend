from flask import request
from ..serializers.sentimentAnalyzerDto import SentimentAnalyzerDto
from ..services.sentimentAnalyzer.sentimentAnalyzer import SentimentAnalyzer
from flask_login import login_required
from flask_restx import Resource

api = SentimentAnalyzerDto.api
paginatedSentimentAnalyzer = SentimentAnalyzerDto.paginatedSentimentAnalyzer
sentimentAnalyzer = SentimentAnalyzerDto.sentimentAnalyzer
tweetAndSentiment = SentimentAnalyzerDto.tweetAndSentiment


@api.route("")
class SentimentAnalyzerController(Resource):
    @login_required
    @api.marshal_with(paginatedSentimentAnalyzer)
    @api.doc(params={'page': 'Page number', 'per_page': 'Tweets per page', 'topicTitle': 'Topic Title'})
    def get(self):
        """
        Returns a page of tweet with sentiments
        """
        page = request.args.get('page', 1, type=int)
        per_page = request.args.get('per_page', 10, type=int)
        topicTitle = request.args.get('topicTitle', "", type=str)
        sa = SentimentAnalyzer()
        return sa.getSentiments(page=page, per_page=per_page, topicTitle=topicTitle)

    @login_required
    @api.expect(sentimentAnalyzer)
    def post(self):
        """
        Analyses the sentiment of tweets generated by a similarity algorithm
        """
        reportId = request.json['reportId']
        topicTitle = request.json['topicTitle']
        algorithm = request.json['algorithm']
        threshold = request.json['threshold']
        sa = SentimentAnalyzer()
        sa.analyzeSentiments(topicTitle=topicTitle, reportId=reportId,
                             algorithm=algorithm, threshold=threshold)


@api.route("/unfiltered")
class SentimentAnalyzerUnfilteredController(Resource):
    @login_required
    @api.expect(sentimentAnalyzer)
    def post(self):
        """
        Analyses the sentiment of a tweet topic
        """
        topicTitle = request.json['topicTitle']
        sa = SentimentAnalyzer()
        sa.analyzeSentimentsUnfiltered(topicTitle=topicTitle)


@api.route("/download")
class SentimentsDownloadController(Resource):
    @login_required
    @api.marshal_with(tweetAndSentiment)
    @api.doc(params={'topicTitle': 'Topic Title'})
    def get(self):
        """
        Returns all the tweets and sentiments belonging to a topic
        """
        topicTitle = request.args.get('topicTitle', "", type=str)
        sa = SentimentAnalyzer()
        return sa.getSentimentsToDownload(topicTitle=topicTitle)
